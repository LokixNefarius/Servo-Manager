from kivy.uix.screenmanager import Screen
from kivy.uix.image import Image
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.core.audio import SoundLoader
from kivy.utils import get_color_from_hex
from kivy.clock import Clock
from kivy.storage.jsonstore import JsonStore
from kivy.uix.filechooser import FileChooserIconView
from kivy.uix.popup import Popup


class AfirmScreen(Screen):
    def __init__(self, **kwargs):
        super(AfirmScreen, self).__init__(**kwargs)
        self.store = JsonStore("config.json")
        self.sound = None
        self.bg_colors = ["#000000", "#0A0A32"]  # Preto e azul escuro
        self.current_color = 0

        self.layout = BoxLayout(orientation="vertical", spacing=10)
        self.add_widget(self.layout)

        self.image = Image(allow_stretch=True, keep_ratio=True, size_hint=(1, 0.5))
        self.load_saved_image()
        self.layout.add_widget(self.image)

        self.button = Button(
            text="Escolher Imagem", size_hint=(0.5, 0.1), on_release=self.select_image, pos_hint={'x': 0.25}
        )
        self.layout.add_widget(self.button)

        Clock.schedule_interval(self.toggle_background, 1)

    def toggle_background(self, dt):
        self.current_color = 1 - self.current_color
        self.layout.canvas.before.clear()
        with self.layout.canvas.before:
            from kivy.graphics import Color, Rectangle

            Color(*get_color_from_hex(self.bg_colors[self.current_color]))
            Rectangle(pos=self.pos, size=self.size)

    def select_image(self, instance):
        file_chooser = FileChooserIconView()

        popup = Popup(
            title="Selecione uma Imagem",
            content=file_chooser,
            size_hint=(0.5, 0.5),
        )

        file_chooser.bind(on_submit=self.on_file_selected)
        popup.open()

    def on_file_selected(self, instance, selection, touch):
        if selection:
            self.image.source = selection[0]
            self.store.put("image", path=selection[0])
            self.play_audio("binaural.mp3")

    def load_saved_image(self):
        if self.store.exists("image"):
            self.image.source = self.store.get("image")["path"]

    def play_audio(self, audio_file):
        if self.sound:
            self.sound.stop()
        self.sound = SoundLoader.load(audio_file)
        if self.sound:
            self.sound.play()
